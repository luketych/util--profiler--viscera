{"{\"assumptions\":{},\"sourceRoot\":\"/Users/luketych/Dev/_util/profiler/viscera/codemods/\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/luketych/Dev/_util/profiler/viscera\",\"filename\":\"/Users/luketych/Dev/_util/profiler/viscera/codemods/inject-profile-import.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/luketych/Dev/_util/profiler/viscera\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"\"use strict\";\n\nconst {\n  dirname,\n  relative,\n  resolve\n} = require('path');\nconst {\n  fileURLToPath\n} = require('url');\n\n// Get the directory of the current module (the codemod file)\n// CommonJS doesn't have import.meta.url, use __filename instead\n// const __filename = fileURLToPath(import.meta.url);\nconst __dirname_codemod = __dirname; // Node provides __dirname in CJS\n\n/**\n * @param {import('jscodeshift').FileInfo} fileInfo\n * @param {import('jscodeshift').API} api\n */\nmodule.exports = function transformer(fileInfo, api) {\n  // Use module.exports\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n  const profileImportIdentifier = 'profileImport'; // Consistent identifier name\n  const markerString = '__AUTO_PROFILE__'; // Structural marker\n\n  // --- Calculate relative path dynamically ---\n  // Absolute path to profileImport.js source file\n  const profileImportAbsolutePath = resolve(__dirname_codemod, '../src/profileImport.js');\n  // Directory of the target file being transformed\n  const targetFileDir = dirname(fileInfo.path);\n  // Calculate the relative path FROM the target file's directory TO profileImport.js\n  let relativePathToProfileImport = relative(targetFileDir, profileImportAbsolutePath);\n  // Normalize path for import statements (e.g., ensure it starts with ./ or ../)\n  if (!relativePathToProfileImport.startsWith('.')) {\n    relativePathToProfileImport = './' + relativePathToProfileImport;\n  }\n  // console.log(`Calculated relative path to profileImport: ${relativePathToProfileImport}`);\n\n  // --- 1. Find or add the profileImport import declaration using calculated path ---\n  let importDeclaration = root.find(j.ImportDeclaration, {\n    source: {\n      type: 'Literal',\n      // Check if the existing import source resolves to the same absolute path\n      value: existingPath => resolve(targetFileDir, existingPath) === profileImportAbsolutePath\n    }\n  });\n  let isImportAdded = false;\n  if (importDeclaration.length === 0) {\n    // console.log(`Adding import for ${profileImportIdentifier} from ${relativePathToProfileImport}`);\n    importDeclaration = j.importDeclaration([j.importDefaultSpecifier(j.identifier(profileImportIdentifier))], j.literal(relativePathToProfileImport) // Use calculated relative path\n    );\n    // Insert the new import declaration at the beginning of the file body\n    const firstNodePath = root.find(j.Program).get('body', 0);\n    if (firstNodePath) {\n      firstNodePath.insertBefore(importDeclaration);\n    } else {\n      // Fallback if the body is empty (e.g., empty file)\n      root.get().node.body.push(importDeclaration);\n    }\n    isImportAdded = true;\n  } else {\n    // console.log(`Found existing import for ${profileImportIdentifier}`);\n  }\n\n  // --- 2. Find and transform dynamic imports, adding the marker argument ---\n  let changed = false;\n  root.find(j.ImportExpression).forEach(importPath => {\n    var _nodeToReplace$parent;\n    // console.log(`Found import: ${j(importPath).toSource()}`);\n\n    // Determine node to replace (the import or the await expression containing it)\n    let nodeToReplace = importPath;\n    if (importPath.parentPath.node.type === 'AwaitExpression') {\n      nodeToReplace = importPath.parentPath;\n    }\n\n    // Check for already wrapped import (basic check)\n    if (((_nodeToReplace$parent = nodeToReplace.parentPath) === null || _nodeToReplace$parent === void 0 || (_nodeToReplace$parent = _nodeToReplace$parent.value) === null || _nodeToReplace$parent === void 0 || (_nodeToReplace$parent = _nodeToReplace$parent.callee) === null || _nodeToReplace$parent === void 0 ? void 0 : _nodeToReplace$parent.name) === profileImportIdentifier) {\n      // console.log('     Skipping already wrapped import.');\n      return;\n    }\n\n    // Check if source is a Literal (dynamic imports require string literals)\n    if (importPath.value.source && importPath.value.source.type === 'Literal') {\n      const modulePathArg = importPath.value.source;\n\n      // Create 'import.meta.url'\n      const importMetaUrl = j.memberExpression(j.metaProperty(j.identifier('import'), j.identifier('meta')), j.identifier('url'));\n\n      // Create the marker argument\n      const markerArg = j.literal(markerString);\n\n      // Create profileImport(modulePath, import.meta.url, null, marker)\n      // Passing null for the _importer argument as it's for testing\n      const wrappedCall = j.callExpression(j.identifier(profileImportIdentifier), [modulePathArg, importMetaUrl, j.literal(null), markerArg]);\n\n      // Wrap in await if the original import was awaited\n      let replacementNode = nodeToReplace === importPath ? wrappedCall : j.awaitExpression(wrappedCall);\n      // console.log(`     Replacing with: ${j(replacementNode).toSource()}`);\n\n      j(nodeToReplace).replaceWith(replacementNode);\n      changed = true;\n    } else {\n      const sourceType = importPath.value.source ? importPath.value.source.type : 'undefined';\n      console.warn(`     Skipping dynamic import: Source is not a Literal (type: ${sourceType}). Source: ${j(importPath).toSource()}`);\n    }\n  });\n\n  // --- 3. Return modified source only if changes were made or import added ---\n  return changed || isImportAdded ? root.toSource({\n    quote: 'single'\n  }) : fileInfo.source; // Use single quotes for consistency\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["dirname","relative","resolve","require","fileURLToPath","__dirname_codemod","__dirname","module","exports","transformer","fileInfo","api","j","jscodeshift","root","source","profileImportIdentifier","markerString","profileImportAbsolutePath","targetFileDir","path","relativePathToProfileImport","startsWith","importDeclaration","find","ImportDeclaration","type","value","existingPath","isImportAdded","length","importDefaultSpecifier","identifier","literal","firstNodePath","Program","get","insertBefore","node","body","push","changed","ImportExpression","forEach","importPath","_nodeToReplace$parent","nodeToReplace","parentPath","callee","name","modulePathArg","importMetaUrl","memberExpression","metaProperty","markerArg","wrappedCall","callExpression","replacementNode","awaitExpression","replaceWith","sourceType","console","warn","toSource","quote"],"sourceRoot":"/Users/luketych/Dev/_util/profiler/viscera/codemods/","sources":["inject-profile-import.js"],"sourcesContent":["const { dirname, relative, resolve } = require('path');\nconst { fileURLToPath } = require('url');\n\n// Get the directory of the current module (the codemod file)\n// CommonJS doesn't have import.meta.url, use __filename instead\n// const __filename = fileURLToPath(import.meta.url);\nconst __dirname_codemod = __dirname; // Node provides __dirname in CJS\n\n/**\n * @param {import('jscodeshift').FileInfo} fileInfo\n * @param {import('jscodeshift').API} api\n */\nmodule.exports = function transformer(fileInfo, api) { // Use module.exports\n\tconst j = api.jscodeshift;\n\tconst root = j(fileInfo.source);\n\n\tconst profileImportIdentifier = 'profileImport'; // Consistent identifier name\n\tconst markerString = '__AUTO_PROFILE__'; // Structural marker\n\n\t// --- Calculate relative path dynamically ---\n\t// Absolute path to profileImport.js source file\n    const profileImportAbsolutePath = resolve(__dirname_codemod, '../src/profileImport.js');\n    // Directory of the target file being transformed\n    const targetFileDir = dirname(fileInfo.path);\n    // Calculate the relative path FROM the target file's directory TO profileImport.js\n    let relativePathToProfileImport = relative(targetFileDir, profileImportAbsolutePath);\n    // Normalize path for import statements (e.g., ensure it starts with ./ or ../)\n    if (!relativePathToProfileImport.startsWith('.')) {\n         relativePathToProfileImport = './' + relativePathToProfileImport;\n    }\n\t// console.log(`Calculated relative path to profileImport: ${relativePathToProfileImport}`);\n\n\t// --- 1. Find or add the profileImport import declaration using calculated path ---\n\tlet importDeclaration = root.find(j.ImportDeclaration, {\n\t\tsource: {\n\t\t\ttype: 'Literal',\n\t\t\t// Check if the existing import source resolves to the same absolute path\n\t\t\tvalue: existingPath => resolve(targetFileDir, existingPath) === profileImportAbsolutePath\n\t\t}\n\t});\n\n\tlet isImportAdded = false;\n\tif (importDeclaration.length === 0) {\n\t\t// console.log(`Adding import for ${profileImportIdentifier} from ${relativePathToProfileImport}`);\n\t\timportDeclaration = j.importDeclaration(\n\t\t\t[j.importDefaultSpecifier(j.identifier(profileImportIdentifier))],\n\t\t\tj.literal(relativePathToProfileImport) // Use calculated relative path\n\t\t);\n\t\t// Insert the new import declaration at the beginning of the file body\n\t\tconst firstNodePath = root.find(j.Program).get('body', 0);\n\t\tif (firstNodePath) {\n\t\t\tfirstNodePath.insertBefore(importDeclaration);\n\t\t} else {\n\t\t\t// Fallback if the body is empty (e.g., empty file)\n\t\t\troot.get().node.body.push(importDeclaration);\n\t\t}\n \t\tisImportAdded = true;\n \t} else {\n \t\t// console.log(`Found existing import for ${profileImportIdentifier}`);\n\t}\n\n\t// --- 2. Find and transform dynamic imports, adding the marker argument ---\n    let changed = false;\n\n    root.find(j.ImportExpression)\n        .forEach(importPath => {\n            // console.log(`Found import: ${j(importPath).toSource()}`);\n\n            // Determine node to replace (the import or the await expression containing it)\n            let nodeToReplace = importPath;\n            if (importPath.parentPath.node.type === 'AwaitExpression') {\n                nodeToReplace = importPath.parentPath;\n            }\n\n            // Check for already wrapped import (basic check)\n            if (nodeToReplace.parentPath?.value?.callee?.name === profileImportIdentifier) {\n                // console.log('     Skipping already wrapped import.');\n                return;\n            }\n\n            // Check if source is a Literal (dynamic imports require string literals)\n            if (importPath.value.source && importPath.value.source.type === 'Literal') {\n                const modulePathArg = importPath.value.source;\n\n\t\t\t\t// Create 'import.meta.url'\n                const importMetaUrl = j.memberExpression(\n                    j.metaProperty(j.identifier('import'), j.identifier('meta')),\n                    j.identifier('url')\n                );\n\n\t\t\t\t// Create the marker argument\n\t\t\t\tconst markerArg = j.literal(markerString);\n\n                // Create profileImport(modulePath, import.meta.url, null, marker)\n\t\t\t\t// Passing null for the _importer argument as it's for testing\n                const wrappedCall = j.callExpression(\n                    j.identifier(profileImportIdentifier),\n                    [modulePathArg, importMetaUrl, j.literal(null), markerArg]\n                );\n\n                // Wrap in await if the original import was awaited\n                let replacementNode = (nodeToReplace === importPath) ? wrappedCall : j.awaitExpression(wrappedCall);\n                // console.log(`     Replacing with: ${j(replacementNode).toSource()}`);\n\n                j(nodeToReplace).replaceWith(replacementNode);\n                changed = true;\n            } else {\n                 const sourceType = importPath.value.source ? importPath.value.source.type : 'undefined';\n                 console.warn(`     Skipping dynamic import: Source is not a Literal (type: ${sourceType}). Source: ${j(importPath).toSource()}`);\n            }\n        });\n\n\t// --- 3. Return modified source only if changes were made or import added ---\n\treturn (changed || isImportAdded) ? root.toSource({ quote: 'single' }) : fileInfo.source; // Use single quotes for consistency\n}\n"],"mappings":"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","ignoreList":[]}},"mtime":1746318437200},"{\"assumptions\":{},\"sourceRoot\":\"/Users/luketych/Dev/_util/profiler/viscera/codemods/\",\"configFile\":false,\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/luketych/Dev/_util/profiler/viscera\",\"filename\":\"/Users/luketych/Dev/_util/profiler/viscera/codemods/remove-profile-import.js\",\"targets\":{},\"cloneInputAst\":true,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/luketych/Dev/_util/profiler/viscera\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"JSXOpeningElement\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"EnumDeclaration\":{\"enter\":[null]},\"EnumBooleanBody\":{\"enter\":[null]},\"EnumNumberBody\":{\"enter\":[null]},\"EnumStringBody\":{\"enter\":[null]},\"EnumSymbolBody\":{\"enter\":[null]},\"EnumBooleanMember\":{\"enter\":[null]},\"EnumNumberMember\":{\"enter\":[null]},\"EnumStringMember\":{\"enter\":[null]},\"EnumDefaultedMember\":{\"enter\":[null]},\"IndexedAccessType\":{\"enter\":[null]},\"OptionalIndexedAccessType\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{},\"externalDependencies\":[]}],\"presets\":[]}:7.27.1:development":{"value":{"code":"\"use strict\";\n\nconst {\n  dirname,\n  relative,\n  resolve\n} = require('path');\n\n/**\n * @param {import('jscodeshift').FileInfo} fileInfo\n * @param {import('jscodeshift').API} api\n */\nmodule.exports = function transformer(fileInfo, api) {\n  const j = api.jscodeshift;\n  const root = j(fileInfo.source);\n  const profileImportIdentifier = 'profileImport'; // Identifier to look for\n  const markerString = '__AUTO_PROFILE__'; // Marker to verify\n  let changed = false;\n\n  // --- 1. Find and unwrap marked profileImport calls ---\n  root.find(j.CallExpression, {\n    callee: {\n      name: profileImportIdentifier\n    }\n  }).forEach(callPath => {\n    // Check if the 4th argument is the marker string\n    const args = callPath.value.arguments;\n    if (args.length >= 4 && args[3].type === 'Literal' && args[3].value === markerString) {\n      // Found a marked call\n      // console.log(`Found marked profileImport call: ${j(callPath).toSource()}`);\n\n      // The original dynamic import expression is the first argument\n      const originalImportArg = args[0];\n\n      // Determine the node to replace (the call expression or its parent await expression)\n      let nodeToReplace = callPath;\n      let replacementNode = j.importExpression(originalImportArg); // Base: import(originalArg)\n\n      if (callPath.parentPath.node.type === 'AwaitExpression') {\n        // console.log('   Parent is AwaitExpression');\n        nodeToReplace = callPath.parentPath;\n        replacementNode = j.awaitExpression(replacementNode); // Wrap: await import(originalArg)\n      }\n\n      // console.log(`   Replacing with: ${j(replacementNode).toSource()}`);\n      j(nodeToReplace).replaceWith(replacementNode);\n      changed = true;\n    }\n  });\n\n  // --- 2. Remove the profileImport import declaration if it's now unused ---\n  if (changed) {\n    // Find the import declaration again\n    const profileImportAbsolutePath = resolve(__dirname, '../src/profileImport.js');\n    const targetFileDir = dirname(fileInfo.path);\n    root.find(j.ImportDeclaration, {\n      source: {\n        type: 'Literal',\n        value: existingPath => resolve(targetFileDir, existingPath) === profileImportAbsolutePath\n      }\n    }).forEach(importDeclPath => {\n      // Check if the default specifier (profileImport) is actually used anywhere else\n      const specifiers = importDeclPath.value.specifiers;\n      if (specifiers && specifiers.length === 1 && specifiers[0].type === 'ImportDefaultSpecifier') {\n        const importName = specifiers[0].local.name;\n        // Count remaining usages of this specific import name\n        const usages = root.find(j.Identifier, {\n          name: importName\n        })\n        // Exclude the import declaration itself from the usage count\n        .filter(idPath => idPath.parentPath !== importDeclPath && idPath.parentPath.value !== specifiers[0]).length;\n\n        // console.log(`Usages found for ${importName}: ${usages}`);\n        if (usages === 0) {\n          // console.log(`Removing unused import declaration for ${importName}`);\n          j(importDeclPath).remove();\n          // No need to set 'changed = true' again, we only remove if other changes were made\n        }\n      }\n    });\n  }\n\n  // --- 3. Return modified source only if changes were made ---\n  return changed ? root.toSource({\n    quote: 'single'\n  }) : fileInfo.source;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["dirname","relative","resolve","require","module","exports","transformer","fileInfo","api","j","jscodeshift","root","source","profileImportIdentifier","markerString","changed","find","CallExpression","callee","name","forEach","callPath","args","value","arguments","length","type","originalImportArg","nodeToReplace","replacementNode","importExpression","parentPath","node","awaitExpression","replaceWith","profileImportAbsolutePath","__dirname","targetFileDir","path","ImportDeclaration","existingPath","importDeclPath","specifiers","importName","local","usages","Identifier","filter","idPath","remove","toSource","quote"],"sourceRoot":"/Users/luketych/Dev/_util/profiler/viscera/codemods/","sources":["remove-profile-import.js"],"sourcesContent":["const { dirname, relative, resolve } = require('path');\n\n/**\n * @param {import('jscodeshift').FileInfo} fileInfo\n * @param {import('jscodeshift').API} api\n */\nmodule.exports = function transformer(fileInfo, api) {\n    const j = api.jscodeshift;\n    const root = j(fileInfo.source);\n\n    const profileImportIdentifier = 'profileImport'; // Identifier to look for\n    const markerString = '__AUTO_PROFILE__'; // Marker to verify\n    let changed = false;\n\n    // --- 1. Find and unwrap marked profileImport calls ---\n    root.find(j.CallExpression, {\n            callee: { name: profileImportIdentifier }\n        })\n        .forEach(callPath => {\n            // Check if the 4th argument is the marker string\n            const args = callPath.value.arguments;\n            if (args.length >= 4 && \n                args[3].type === 'Literal' && \n                args[3].value === markerString) {\n                \n                // Found a marked call\n                // console.log(`Found marked profileImport call: ${j(callPath).toSource()}`);\n\n                // The original dynamic import expression is the first argument\n                const originalImportArg = args[0];\n\n                // Determine the node to replace (the call expression or its parent await expression)\n                let nodeToReplace = callPath;\n                let replacementNode = j.importExpression(originalImportArg); // Base: import(originalArg)\n\n                if (callPath.parentPath.node.type === 'AwaitExpression') {\n                    // console.log('   Parent is AwaitExpression');\n                    nodeToReplace = callPath.parentPath;\n                    replacementNode = j.awaitExpression(replacementNode); // Wrap: await import(originalArg)\n                }\n                \n                // console.log(`   Replacing with: ${j(replacementNode).toSource()}`);\n                j(nodeToReplace).replaceWith(replacementNode);\n                changed = true;\n            }\n        });\n\n    // --- 2. Remove the profileImport import declaration if it's now unused ---\n    if (changed) {\n        // Find the import declaration again\n        const profileImportAbsolutePath = resolve(__dirname, '../src/profileImport.js');\n        const targetFileDir = dirname(fileInfo.path);\n        \n        root.find(j.ImportDeclaration, {\n            source: {\n                type: 'Literal',\n                value: existingPath => resolve(targetFileDir, existingPath) === profileImportAbsolutePath\n            }\n        }).forEach(importDeclPath => {\n            // Check if the default specifier (profileImport) is actually used anywhere else\n            const specifiers = importDeclPath.value.specifiers;\n            if (specifiers && specifiers.length === 1 && specifiers[0].type === 'ImportDefaultSpecifier') {\n                const importName = specifiers[0].local.name;\n                // Count remaining usages of this specific import name\n                const usages = root.find(j.Identifier, { name: importName })\n                                  // Exclude the import declaration itself from the usage count\n                                  .filter(idPath => idPath.parentPath !== importDeclPath && idPath.parentPath.value !== specifiers[0]) \n                                  .length;\n                \n                // console.log(`Usages found for ${importName}: ${usages}`);\n                if (usages === 0) {\n                    // console.log(`Removing unused import declaration for ${importName}`);\n                    j(importDeclPath).remove();\n                    // No need to set 'changed = true' again, we only remove if other changes were made\n                }\n            }\n        });\n    }\n\n    // --- 3. Return modified source only if changes were made ---\n    return changed ? root.toSource({ quote: 'single' }) : fileInfo.source;\n};\n"],"mappings":"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","ignoreList":[]}},"mtime":1746319099212}}